=== Java 17 ===

interface       -> interface                    OK
interface       -> class || abstract class      NOK
abstract class  -> class                        OK
class  -> abstract class                        OK
record -> record, abstract class, interface     NOK


// ====== JDBC 1 =======
{
    public static void main(String[] args) throws Exception {
        var url = "jdbc:mysql://localhost:3306/REAL_DB";
        var user = "root";
        var password = "root";
        var query = "Select ID, FIRSTNAME, LASTNAME, SALARY FROM EMPLOYEE ORDER BY ID";
        try (var con = DriverManager.getConnection(url, user, password);
            var stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);)
        {      
            var rs = stmt.executeQuery(query);
            rs.absolute(1);               //Move o cursor para a linha informada, nesse contexto esse trecho é inutil e serve apenas para confundir o leitor do teste.
            rs.moveToInsertRow();         //Move para uma linha especial para inclusão de novos registros(não é nen nenhum dos registros que estavam na base)
            rs.updateInt(1, 105);         //Na linha de inserção, atualiza a coluna informado com o valor
            rs.updateString(2, "Chris");  //Na linha de inserção, atualiza a coluna informado com o valor
            rs.updateString(3, "Morris"); //Na linha de inserção, atualiza a coluna informado com o valor
            rs.updateDouble(4, 25000);    //Na linha de inserção, atualiza a coluna informado com o valor
            rs.insertRow(); 
            //rs.deleteRow();  Não irão funcionar pois somente os metodos de consulta, inserção(insertRow) e atualização(updateInt, updateString...) irão funcionar na linha especial.
            //rs.refreshRow(); Não irão funcionar pois somente os metodos de consulta, inserção(insertRow) e atualização(updateInt, updateString...) irão funcionar na linha especial.

            System.out.println(rs.getInt(1));
        }
    }
}
//=== NECESSARIO REVISAR 001 ======
{
    public class Main {
        public static void main(String[] args) {
          ForkJoinPool pool = new ForkJoinPool(THREADS);
          long sum = pool.invoke(new Adder.AdderTask(1, LIMIT));
          System.out.printf( "sum of the number from %d to %d is %d %n", 1, LIMIT, sum);
        }
    }
    public class Adder {
      public static long LIMIT = 1000000000;
      public static final int THREADS = 100;
    
      static class AdderTask extends RecursiveTask<Long> {
        long from, to;
    
        public AdderTask(long from, long to) {
          this.from = from;
          this.to = to;
        }
    
        @Override
        protected Long compute() {
          if ((to - from) <= LIMIT/THREADS) {
            long localSum = 0;
            for(long i = from; i <= to; i++) {
              localSum += i;
            }
            return localSum;
          }
          else {
            long mid = (from + to) / 2;
            AdderTask first  = new AdderTask(from, mid);
            AdderTask second = new AdderTask(mid + 1, to);
            first.fork();
            /*INSERT*/
          }
        }
      }
    }
}
//=== NECESSARIO REVISAR 002 ======
public class Test {
    public static void main(String[] args) {
        // @FunctionalInterface => A interface que implementa representa uma função
        // BiFunction<TipoArg1, TipoArg2, TipoResultado> =
        BiFunction<Double, Double, Integer> compFunc = Double::compareTo;
        System.out.println(compFunc.apply(10.01, 11.99));
    }
}

//==== PEGADINHA 001 =====
{
    public static void main(String [] args) {
        int num = 10;
        if(num++ == num++) {
            System.out.println("EQUAL " + num);
        } else {
            System.out.println("NOT EQUAL " + num);
        }
    }
}
//==== PEGADINHA 002 =====
{
    public class Test {
        public static void main(String[] args) {
            BiFunction<Double, Double, Integer> compFunc =  Double::compareTo;
            System.out.println(compFunc.apply(10.01, 11.99));
        }
    }
}
//====== PEGADINHA(?) 003 =====
{
    class Person {
        private String name;
        private int age;
      
        public Person(String name, int age) {
          this.name = name;
          this.age = age;
        }
      
        public String getName() {
          return name;
        }
      
        public int getAge() {
          return age;
        }
      }
      
      class Student extends Person implements Serializable {
        private String course;
      
        public Student(String name, int age, String course) {
          super(name, age);
          this.course = course;
        }
      
        public String getCourse() {
          return course;
        }
      }
      
      public class Main {
        public static void main(String[] args) throws IOException, ClassNotFoundException {
          var stud = new Student("Aamir", 25, "Computer Science"); //Não irá funcionar pois a classe Person não implementar Serializable.
                                                                   //Funcionar se a classe Person implementar Serialiable, independente de a clase Student implementar
          try (var oos = new ObjectOutputStream(new FileOutputStream(("D:\\stud.ser")));
               var ois = new ObjectInputStream(
                       new FileInputStream("D:\\stud.ser")))
          {
            oos.writeObject(stud);
      
            var s = (Student) ois.readObject();
            System.out.printf("%s, %d, %s", s.getName(),
                    s.getAge(), s.getCourse());
          }
        }
      }
}
//====== PEGADINHA 004 ====
{
    public static void main(String[] args) {
        var loc = new Locale("it", "IT"); 
        loc.setDefault(loc); //Ao me deparar com esse código imaginei que ele não printaria nada a ver com a Italia, porem mesmo a instancia seta globalmente o valor default de localidade no sistema.
        System.out.println(Locale.getDefault());
    }
}
//====== PEGADINHA 005 ======
{
    public static void main(String[] args) 
                                throws Exception {
        var url = "jdbc:mysql://localhost:3306/ocp";
        var user = "root";
        var password = "password";
        var query = "INSERT INTO EMPLOYEE VALUES(?, ?, ?, ?)";
        try (var con = DriverManager
                       .getConnection(url, user, password);
             var ps = con.prepareStatement(query);
        ) {
            // Ao me deparar com esse codigo, a principio imaginei que daria erro em tempo de execução(imaginei que precisaria do comando insertRow) porem o JDBC entende que 
            // ao setar um valor numa coluna, sem mover o cursor,  vc quer inserir um novo registro, porem, ao setar um novo valor para uma mesma coluna o valor é substituido, 
            // ou seja, apenas um registro será inserido por vez.
            ps.setInt(1, 101);
            ps.setObject(3, "Smith");
            ps.setString(2, "John");
            ps.setDouble(4, 12000.0);
            ps.setDouble(4, 12500.0);
            ps.executeUpdate();
        }
    }
}
//====== PONTO DE ATENÇÃO 001 ======

// O código abaixo compila e executa logando PET
// não sabia da existencia do método SET num List
public static void main(String[] args) {
  List<String> list = new ArrayList<>();
  list.add("P");
  list.add("O");
  list.add("T");                              // Ao setar na subList ele afeta a lista original
  List<String> subList = list.subList(1, 2);  // Aqui ele retorna o tipo SubList, classe interna do ArrayList
  subList.set(0, "E");                        // Ao setar na posição 0, como a sublista corresponde à posição 1 da lista original, logo a lista original ficará ['P', 'E', 'T']
                                              // Sinceramente mexer com sublista e set parece ser bem perigoso, podendo manipular suas informações de forma errônea.
                                              //--------------------------------------
                                              // LISTA    | 0 | 1 | 2 |
                                              //          | P | O | T |
                                              //--------------------------------------
                                              // SUBLISTA     | 0 |
                                              //              | E |
                                              //--------------------------------------
  String s = String.join("", list);
  System.out.println(s);
}
//====== PONTO DE ATENÇÃO 002 ======

public static void main(String[] args) {
  // D:.
  // ├───Parent
  // │   └───Child
  // │           Message.txt
  // │
  // ├───Shortcut
  // │       Child.lnk
  // │
  // └───Other
  //     └───Logs 
  var path1 = Paths.get("D:", "Other", "Logs");                              // D:\Other\Logs
  var path2 = Paths.get("..", "..", "Shortcut", "Child.lnk", "Message.txt"); // ..\..\Shortcut\Child.lnk\Message.txt

  //  Metodo resolve() é responsável por fazer a correlação entre dois Paths, resultando um unico Path.
  //  Metodo resolveSibling() leva em consideração o Parent do Path para correlacionar com outro Path fornecido.
  //  Metodo normalize() é responsável por sanitizar o Path de maneira que remova "comandos" de navegação.
  //  A interface Path e suas implementações não validam se o caminho é existente ou não. Para isso utilize a classe File.
  var path3 = path1.resolve(path2).normalize();
  var path4 = path1.resolveSibling(path2).normalize();

  // O codigo funcionara corretamente e irá printar true
  
  System.out.println(path3.equals(path4));
  //  É true pois:
  //    1° path1 é um caminho absoluto
  //    2° path2 navega duas pastas para tras(acima) na hierarquia, anulando o que o metodo resolveSibling faz que é referenciar a pasta Other, parent da pasta Logs. 
  //       └─> Dessa forma ao navegar duas vezes para tras, ambas se encontram na pasta D: resultando no true

  //    path3 sem normalize = D:\Other\Logs\..\..\Shortcut\Child.lnk\Message.txt
  //    path3 sem normalize = D:\Other\..\..\Shortcut\Child.lnk\Message.txt

  // Caso houver apenas um recuo(..) de pasta, resultaria num false 
}

//====== PONTO DE ATENÇÃO 003 ======
//  Which of the options of java command displays module resolution output?
//  Resposta: --show-module-resolution


//====== PONTO DE ATENÇÃO 004 ======
public static void main(String[] args) {
  double price = 90000;
  String model; //Variavel não inicializada gera erro de compilação
  if(price > 100000) {
      model = "Tesla Model X";
  } else if(price <= 100000) {
      model = "Tesla Model S";
  }
  System.out.println(model);
}
//====== PONTO DE ATENÇÃO 005 ======
private static final Integer VALUE = 1231;
public static void main(String [] args)  {
  var df1 = new DecimalFormat("###,##,#"); //1,23,1 EXPECTATIVA
  var df2 = new DecimalFormat("##,###,#"); //123,1  EXPECTATIVA
  var i = df1.format(VALUE); // "1.2.3.1"
  var j = df2.format(VALUE); // "1.2.3.1"
  
  //  Os formatos acima são mesma coisa que este formato "#,#", traduzindo, cada digito é separado por ponto(.) (No padrão lixo estadunidense virgula)
  //  Ao utilizar #, a ultima virgula e os caracteres consecutivos de digito(#), irão definir o resto do padrão de agrupamento, independente do que esteja escrito mais a esquerda.
  //  (##,# == ######,# == #,##) - (##,## == #,##) - (#,### == ##,###)
  //  Integer.MAX_VALUE => 2.1.4.7.4.8.3.6.4.7
  //  Double.MAX_VALUE  => 1.7.9.7.6.9.3.1.3.4.8.6.2.3.1.5.7.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0
  System.out.println(df1.format(VALUE)
          .equals(df2.format(VALUE)));
}
