=== REDIS ===
Instalar o WSL (Windows Subsystem Linux)
No Powershell, execute o comando: 
wsl --list --install //Ele irá listar as distribuições Linux disponíveis para instalação

No caso eu escolhi o Debian
Instale a distribuição escolhida: 
wsl --install -d Debian

Será necessario a criação de um usuario e senha para o Linux, porem vamos pular essa parte.

Executamos o Linux, e vamos atualizar o apt-get: 
sudo apt-get update

Em seguida vamos instalar o Redis:
sudo apt-get install redis

Para iniciar o servidor do Redis, use:
sudo service redis-server start

Para conectar no Redis, use:
redis-cli

Para testar se a conexão funcionou, use:
ping
ou
ECHO "mensagem"


Para adicionar um atributo, use:
SET "nome_da_chave" valor

Para consultar o valor de uma chave, use:
GET "nome_da_chave"

Para consultar todas as chaves, utilize:
KEYS *

Para deletar utilize, DEL. Exemplo:
DEL "nome_da_chave"

Um padrão que é interessante utilizar no nome das chaves é a separação por :(dois pontos).
Dessa forma, o nome fica bem mais estruturado e facil de ser consultado posteriormente. Exemplo:

resultado:03-05-2024:megasena "1,2,3,4,5,6"

É possivel adicionar, num unico comando, inumeros atributos a serem salvos no Redis. Exemplo:

MSET "nome_da_chave01" valor01 "nome_da_chave02" valor02 "nome_da_chave03" valor03

Para consultar as chaves, é possível utilizar padrão nas consultas. Exemplo
KEYS "resultado*" --Tudo que começa com a palavra resultado
KEYS "resultado:*-05-2024:megasena" --Tudo que começa com resultado, seja de maio de 2024 e seja da megasena.
KEYS "resultado:1?-05-2024:megasena" --Tudo que começa com resultado e tenha um unico caracter após o algarismo 1 e seja da megasena
KEYS "resultado:?[37]-??-????:megasena" --Tudo que começa com resultado e que tenha no ultimo caracter do dia o numero 3 ou 7 e seja da megasena

Para setar multiplos valores dentro de um mesma chave utilize o comando HSET (hashes). Exemplo
HSET resultado:24-05-2024:megasena "numeros" "1,2,3,4,5,6"
HSET resultado:24-05-2024:megasena "qtde_ganhadores" 3

A estrutura, se desenhada, ficaria mais ou menos assim:
  resultado:24-05-2024:megasena
    |_ "numeros" => "1,2,3,4,5,6"
    |_ "qtde_ganhadores" => 3


E para consultar utilizamos o HGET. Exemplos:
HGET resultado:24-05-2024:megasena "numeros"
HGET resultado:24-05-2024:megasena "qtde_ganhadores"

GET resultado:24-05-2024:megasena   -- Gera erro
HSET resultado:24-05-2024:megasena  -- Gera erro

Para deletar um atributos hash, utilizamos HDEL. Exemplo:
HDEL resultado:24-05-2024:megasena "numeros"


Podemos utilizar o comando HMSET para atribuir inumeros campos dentro de uma mesma chave. Exemplo
HMSET resultado:28-06-2024:megasena "numeros" "7,8,9,10,11,12"  "qtde_ganhadores" "3"

Para consultar todos os atributos de um hash, utilizamos o comando HGETALL. Exemplo
HGETALL "resultado:28-06-2024:megasena"

O resultado é:
1) "numeros"
2) "7,8,9,10,11,12"
3) "qtde_ganhadores"
4) "3"

Para setar a tempo de expiração de uma informação, utilize o comando EXPIRE. Exemplo.
EXPIRE "sessao:usuario:1000" 1800 -- Valor em segundos

Para consultar o tempo que falta para expirar uma informação utilize o comando TTL(Time left). Exemplo:
TTL "sessao:usuario:1000"

Para retornar o tempo em milissegundos, utilize o comando PTTL. Exemplo:
PTTL "sessao:usuario:1000"

Para incrementar em um, algum valor, utilize o comando INCR. Exemplo:
INCR pagina:/contato:25-05-2024

Para decrementar em um, algum valor, utilize o comando DECR. Exemplo:
DECR pagina:/contato:25-05-2024

Para incrementar um valor inteiro qualquer, utilize o comando INCRBY. Exemplo:
INCRBY compras:25-05-2024:valor 15

Para decrementar um valor inteiro qualquer, utilize o comando INCRBY. Exemplo:
DECRBY compras:25-05-2024:valor 24

Para incrementar um valor float qualquer, utilize o comando INCRBYFLOAT. Exemplo:
INCRBYFLOAT compras:25-05-2024:valor 15.25

Para decrementar um valor float qualquer, utilize o comando INCRBYFLOAT. Exemplo:
DECRBYFLOAT compras:25-05-2024:valor 24.82

Para salvar um booleano, utilize o comando SETBIT. Exemplo:
SETBIT acesso:25-05-2024 30 1 (30 é o id e 1 é o valor)
SETBIT acesso:25-05-2024 54 1 (54 é o id e 1 é o valor)

SETBIT acesso:26-05-2024 30 1
SETBIT acesso:26-05-2024 19 1

SETBIT acesso:27-05-2024 30 1
SETBIT acesso:27-05-2024 54 1
SETBIT acesso:27-05-2024 19 1

Para recuperar um valor booleano, utilize o comando GETBIT. Exemplo:
GETBIT acesso:25-05-2024 30

Para recuperar a quantidade de valores "true" de uma matriz de bit, utilizamos o comando BITCOUNT. Exemplo:
BITCOUNT "acesso:25-05-2024" -- Retorna 2

Para comparar duas ou mais sequências de bits, é necessário gerar um nova sequência de bits, fruto dessa comparação. Nesse caso utilizamos o comando BITOP (OPeração). Mas ele não funciona sozinho. No caso vamos associar ele ao comando AND e vamos comparar essas sequências. Exemplo:
      ______________ ______________ __________________
     |  25-05-2024  |  26-05-2024  |  25-e-26-05-2024 |
 30. |      X       |      X       |        X         |
 54. |      X       |              |                  |
 19. |              |      X       |                  |
      -------------- -------------- ------------------

Para gerar a sequência com a informações de comparação entre os dias 25 e 26 usaremos o seguinte comando:
BITOP AND "acesso:25-e-26-05-2024" "acesso:25-05-2024" "acesso:26-05-2024"

Para consultar a nova sequência gerada, digitamos os comandos abaixo:
GETBIT acesso:25-e-26-05-2024 30 -- Retorno é 1
GETBIT acesso:25-e-26-05-2024 54 -- Retorno é 0
GETBIT acesso:25-e-26-05-2024 19 -- Retorno é 0

BITCOUNT acesso:25-e-26-05-2024  -- Retorno é 1



Para queremos utiliza outra operação condicional. Usaremos o OR para comparar quem acessou a aplicação em qualquer dia. Segue o comando:
BITOP OR "acesso:25-ou-26-05-2024" "acesso:25-05-2024" "acesso:26-05-2024"
      ______________ ______________ __________________
     |  25-05-2024  |  26-05-2024  | 25-ou-26-05-2024 |
 30. |      X       |      X       |        X         |
 54. |      X       |              |        X         |
 19. |              |      X       |        X         |
      -------------- -------------- ------------------

Para consultar a nova sequência gerada digitamos os comandos abaixo:
GETBIT acesso:25-ou-26-05-2024 30 -- Retorno é 1
GETBIT acesso:25-ou-26-05-2024 54 -- Retorno é 1
GETBIT acesso:25-ou-26-05-2024 19 -- Retorno é 1

BITCOUNT acesso:25-ou-26-05-2024  -- Retorno é 3

===================================================

Para adicionar elementos à esquerda de uma lista, utilize o comando LPUSH. Exemplo:
LPUSH noticias 'Michael Jackson encontrado vivo na Bahia'
LPUSH noticias 'Piada sobre bebida favorita do Gugu, revolta a internet'
LPUSH noticias 'Moda ou simplesmente burrice: o tema da Terra plana'

Para adicionar elementos à direita de uma lista, utilize o comando RPUSH. Exemplo:
RPUSH 'fila:confirmaEmail' 'matheus@gmail.com'
RPUSH 'fila:confirmaEmail' 'maria@outlook.com'

Para "aparar" a lista, utilizamos o comando LTRIM. Passa-se o range dos itens que queremos manter. Exemplo:
LTRIM noticias 0 1 --No caso se houver itens na posição 2 ou maior, elas serão apagadas.

Para realizar a leitura de um elemento de uma lista, utilize o comando LINDEX. Exemplo:
LINDEX noticias 0 -- Zero sendo o index do elemento na lista.

Para sabermos o tamanho atual da nossa lista, usamos o comando LLEN. Exemplo:
LLEN noticias -- O retorno é 2

Para pegar o primeiro item de uma lista e remove-lo da mesma:
LPOP 'fila:confirmaEmail' -- Retorna matheus@gmail.com e sobra maria@outlook.com na lista
LPOP 'fila:confirmaEmail' -- Retorna maria@outlook.com e a lista fica vazia
LPOP 'fila:confirmaEmail' -- Retorna nulo

Para pegar o primeiro item de uma lista e remove-la, caso esteja vazia, aguarde um tempo determinado, use BLPOP:
Obs.: Evita que consulte a lista a todo tempo, evitando o uso de memória e CPU desnecessario.
BLPOP 'fila:confirmaEmail' 100 -- Caso esteja vazia, aguarda por 100s. Se o tempo acabar, retorna nulo.
BLPOP 'fila:confirmaEmail'   0 -- Caso esteja vazia, aguarda eternamente.

Para consultar varios valores de uma lista utilize o comando LRANGE. Exemplo: 
LRANGE noticias 0 1 --Se o valor final for maior que a quantidade total, ele não gera erro, mostra tudo que existe na lista.

===================================================
Conjuntos

Não há repetição de dados num conjunto.
SADD times "São Paulo" -- Adiciona a string "São Paulo" ao conjunto times
SADD times "Flamengo"  -- Adiciona a string "Flamengo" ao conjunto times

SMEMBERS times -- Lista o membros do conjunto times
| 1 | São Paulo  |
| 2 | Flamengo   |

SISMEMBER times "Vasco" -- Valida se o item "Vasco" está no conjunto times
false
SISMEMBER times "Flamengo" -- Valida se o item "Flamengo" está no conjunto times
true









